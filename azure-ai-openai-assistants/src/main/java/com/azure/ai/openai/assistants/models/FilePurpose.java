// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.assistants.models;
import io.clientcore.core.util.ExpandableEnum;

import java.util.Collection;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;

/**
 * The possible values denoting the intended usage of a file.
 */
public final class FilePurpose implements ExpandableEnum<FilePurpose> {
    private static final Map<String, FilePurpose> VALUES = new ConcurrentHashMap<>();

    private final String caseSensitive;
    private final String caseInsensitive;

    private FilePurpose(String name) {
        this.caseSensitive = name;
        this.caseInsensitive = name.toLowerCase();
    }

    @Override
    public FilePurpose getValue() {
        return FilePurpose.fromString(caseSensitive);
    }

    /**
     * Gets all known {@link FilePurpose} values.
     *
     * @return The known {@link FilePurpose} values.
     */
    public static Collection<FilePurpose> values() {
        return VALUES.values();
    }

    /**
     * Creates or finds a {@link FilePurpose} for the passed {@code name}.
     *
     * <p>{@code null} will be returned if {@code name} is {@code null}.</p>
     *
     * @param name A name to look for.
     *
     * @return The corresponding {@link FilePurpose} of the provided name, or {@code null} if {@code name} was
     * {@code null}.
     */
    public static FilePurpose fromString(String name) {
        if (name == null) {
            return null;
        }

        FilePurpose exceptionType = VALUES.get(name);

        if (exceptionType != null) {
            return exceptionType;
        }

        return VALUES.computeIfAbsent(name, FilePurpose::new);
    }

    @Override
    public String toString() {
        return caseSensitive;
    }

    @Override
    public int hashCode() {
        return caseInsensitive.hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof FilePurpose)) {
            return false;
        }

        FilePurpose other = (FilePurpose) obj;

        return Objects.equals(caseInsensitive, other.caseInsensitive);
    }
    /**
     * Indicates a file is used for fine tuning input.
     */
    
    public static final FilePurpose FINE_TUNE = fromString("fine-tune");

    /**
     * Indicates a file is used for fine tuning results.
     */
    
    public static final FilePurpose FINE_TUNE_RESULTS = fromString("fine-tune-results");

    /**
     * Indicates a file is used as input to assistants.
     */
    
    public static final FilePurpose ASSISTANTS = fromString("assistants");

    /**
     * Indicates a file is used as output by assistants.
     */
    
    public static final FilePurpose ASSISTANTS_OUTPUT = fromString("assistants_output");

    /**
     * Indicates a file is used as input to .
     */
    
    public static final FilePurpose BATCH = fromString("batch");

    /**
     * Indicates a file is used as output by a vector store batch operation.
     */
    
    public static final FilePurpose BATCH_OUTPUT = fromString("batch_output");

    /**
     * Indicates a file is used as input to a vision operation.
     */
    
    public static final FilePurpose VISION = fromString("vision");
}
