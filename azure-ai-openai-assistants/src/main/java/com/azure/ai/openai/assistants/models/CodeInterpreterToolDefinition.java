// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.assistants.models;


import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonSerializable;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import java.io.IOException;

/**
 * The input definition information for a code interpreter tool as used to configure an assistant.
 */

public final class CodeInterpreterToolDefinition extends ToolDefinition {

    /**
     * Creates an instance of CodeInterpreterToolDefinition class.
     */
    
    public CodeInterpreterToolDefinition() {
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", "code_interpreter");
        return jsonWriter.writeEndObject();
    }

    /*
     * The object type.
     */
    
    private String type = "code_interpreter";

    /**
     * Get the type property: The object type.
     *
     * @return the type value.
     */
    
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Reads an instance of CodeInterpreterToolDefinition from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of CodeInterpreterToolDefinition if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CodeInterpreterToolDefinition.
     */
    
    public static CodeInterpreterToolDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CodeInterpreterToolDefinition deserializedCodeInterpreterToolDefinition
                = new CodeInterpreterToolDefinition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("type".equals(fieldName)) {
                    deserializedCodeInterpreterToolDefinition.type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedCodeInterpreterToolDefinition;
        });
    }
}
