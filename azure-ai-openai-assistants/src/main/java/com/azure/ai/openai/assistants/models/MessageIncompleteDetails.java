// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.assistants.models;


import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonSerializable;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import java.io.IOException;

/**
 * Information providing additional detail about a message entering an incomplete status.
 */

public final class MessageIncompleteDetails implements JsonSerializable<MessageIncompleteDetails> {

    /*
     * The provided reason describing why the message was marked as incomplete.
     */

    private final MessageIncompleteDetailsReason reason;

    /**
     * Creates an instance of MessageIncompleteDetails class.
     *
     * @param reason the reason value to set.
     */

    public MessageIncompleteDetails(MessageIncompleteDetailsReason reason) {
        this.reason = reason;
    }

    /**
     * Get the reason property: The provided reason describing why the message was marked as incomplete.
     *
     * @return the reason value.
     */

    public MessageIncompleteDetailsReason getReason() {
        return this.reason;
    }

    /**
     * {@inheritDoc}
     */

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("reason", this.reason == null ? null : this.reason.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MessageIncompleteDetails from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MessageIncompleteDetails if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MessageIncompleteDetails.
     */

    public static MessageIncompleteDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MessageIncompleteDetailsReason reason = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("reason".equals(fieldName)) {
                    reason = MessageIncompleteDetailsReason.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new MessageIncompleteDetails(reason);
        });
    }
}
