// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.assistants.models;


import java.util.Collection;

import io.clientcore.core.util.ExpandableEnum;

import java.util.Collection;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;

/**
 * Each event in a server-sent events stream has an `event` and `data` property:
 * <p>
 * ``` event: thread.created data: {"id": "thread_123", "object": "thread", ...} ```
 * <p>
 * We emit events whenever a new object is created, transitions to a new state, or is being streamed in parts (deltas).
 * For example, we emit `thread.run.created` when a new run is created, `thread.run.completed` when a run completes, and
 * so on. When an Assistant chooses to create a message during a run, we emit a `thread.message.created event`, a
 * `thread.message.in_progress` event, many `thread.message.delta` events, and finally a `thread.message.completed`
 * event.
 * <p>
 * We may add additional events over time, so we recommend handling unknown events gracefully in your code.
 */
public final class AssistantStreamEvent implements ExpandableEnum<AssistantStreamEvent> {
    private static final Map<String, AssistantStreamEvent> VALUES = new ConcurrentHashMap<>();

    private final String caseSensitive;
    private final String caseInsensitive;

    private AssistantStreamEvent(String name) {
        this.caseSensitive = name;
        this.caseInsensitive = name.toLowerCase();
    }

    @Override
    public AssistantStreamEvent getValue() {
        return AssistantStreamEvent.fromString(caseSensitive);
    }

    /**
     * Gets all known {@link AssistantStreamEvent} values.
     *
     * @return The known {@link AssistantStreamEvent} values.
     */
    public static Collection<AssistantStreamEvent> values() {
        return VALUES.values();
    }

    /**
     * Creates or finds a {@link AssistantStreamEvent} for the passed {@code name}.
     *
     * <p>{@code null} will be returned if {@code name} is {@code null}.</p>
     *
     * @param name A name to look for.
     *
     * @return The corresponding {@link AssistantStreamEvent} of the provided name, or {@code null} if {@code name} was
     * {@code null}.
     */
    public static AssistantStreamEvent fromString(String name) {
        if (name == null) {
            return null;
        }

        AssistantStreamEvent exceptionType = VALUES.get(name);

        if (exceptionType != null) {
            return exceptionType;
        }

        return VALUES.computeIfAbsent(name, AssistantStreamEvent::new);
    }

    @Override
    public String toString() {
        return caseSensitive;
    }

    @Override
    public int hashCode() {
        return caseInsensitive.hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof AssistantStreamEvent)) {
            return false;
        }

        AssistantStreamEvent other = (AssistantStreamEvent) obj;

        return Objects.equals(caseInsensitive, other.caseInsensitive);
    }

    /**
     * Event sent when a new thread is created. The data of this event is of type AssistantThread.
     */

    public static final AssistantStreamEvent THREAD_CREATED = fromString("thread.created");

    /**
     * Event sent when a new run is created. The data of this event is of type ThreadRun.
     */

    public static final AssistantStreamEvent THREAD_RUN_CREATED = fromString("thread.run.created");

    /**
     * Event sent when a run moves to `queued` status. The data of this event is of type ThreadRun.
     */

    public static final AssistantStreamEvent THREAD_RUN_QUEUED = fromString("thread.run.queued");

    /**
     * Event sent when a run moves to `in_progress` status. The data of this event is of type ThreadRun.
     */

    public static final AssistantStreamEvent THREAD_RUN_IN_PROGRESS = fromString("thread.run.in_progress");

    /**
     * Event sent when a run moves to `requires_action` status. The data of this event is of type ThreadRun.
     */

    public static final AssistantStreamEvent THREAD_RUN_REQUIRES_ACTION = fromString("thread.run.requires_action");

    /**
     * Event sent when a run is completed. The data of this event is of type ThreadRun.
     */

    public static final AssistantStreamEvent THREAD_RUN_COMPLETED = fromString("thread.run.completed");

    /**
     * Event sent when a run fails. The data of this event is of type ThreadRun.
     */

    public static final AssistantStreamEvent THREAD_RUN_FAILED = fromString("thread.run.failed");

    /**
     * Event sent when a run moves to `cancelling` status. The data of this event is of type ThreadRun.
     */

    public static final AssistantStreamEvent THREAD_RUN_CANCELLING = fromString("thread.run.cancelling");

    /**
     * Event sent when a run is cancelled. The data of this event is of type ThreadRun.
     */

    public static final AssistantStreamEvent THREAD_RUN_CANCELLED = fromString("thread.run.cancelled");

    /**
     * Event sent when a run is expired. The data of this event is of type ThreadRun.
     */

    public static final AssistantStreamEvent THREAD_RUN_EXPIRED = fromString("thread.run.expired");

    /**
     * Event sent when a new thread run step is created. The data of this event is of type RunStep.
     */

    public static final AssistantStreamEvent THREAD_RUN_STEP_CREATED = fromString("thread.run.step.created");

    /**
     * Event sent when a run step moves to `in_progress` status. The data of this event is of type RunStep.
     */

    public static final AssistantStreamEvent THREAD_RUN_STEP_IN_PROGRESS = fromString("thread.run.step.in_progress");

    /**
     * Event sent when a run stepis being streamed. The data of this event is of type RunStepDeltaChunk.
     */

    public static final AssistantStreamEvent THREAD_RUN_STEP_DELTA = fromString("thread.run.step.delta");

    /**
     * Event sent when a run step is completed. The data of this event is of type RunStep.
     */

    public static final AssistantStreamEvent THREAD_RUN_STEP_COMPLETED = fromString("thread.run.step.completed");

    /**
     * Event sent when a run step fails. The data of this event is of type RunStep.
     */

    public static final AssistantStreamEvent THREAD_RUN_STEP_FAILED = fromString("thread.run.step.failed");

    /**
     * Event sent when a run step is cancelled. The data of this event is of type RunStep.
     */

    public static final AssistantStreamEvent THREAD_RUN_STEP_CANCELLED = fromString("thread.run.step.cancelled");

    /**
     * Event sent when a run step is expired. The data of this event is of type RunStep.
     */

    public static final AssistantStreamEvent THREAD_RUN_STEP_EXPIRED = fromString("thread.run.step.expired");

    /**
     * Event sent when a new message is created. The data of this event is of type ThreadMessage.
     */

    public static final AssistantStreamEvent THREAD_MESSAGE_CREATED = fromString("thread.message.created");

    /**
     * Event sent when a message moves to `in_progress` status. The data of this event is of type ThreadMessage.
     */

    public static final AssistantStreamEvent THREAD_MESSAGE_IN_PROGRESS = fromString("thread.message.in_progress");

    /**
     * Event sent when a message is being streamed. The data of this event is of type MessageDeltaChunk.
     */

    public static final AssistantStreamEvent THREAD_MESSAGE_DELTA = fromString("thread.message.delta");

    /**
     * Event sent when a message is completed. The data of this event is of type ThreadMessage.
     */

    public static final AssistantStreamEvent THREAD_MESSAGE_COMPLETED = fromString("thread.message.completed");

    /**
     * Event sent before a message is completed. The data of this event is of type ThreadMessage.
     */

    public static final AssistantStreamEvent THREAD_MESSAGE_INCOMPLETE = fromString("thread.message.incomplete");

    /**
     * Event sent when an error occurs, such as an internal server error or a timeout.
     */

    public static final AssistantStreamEvent ERROR = fromString("error");

    /**
     * Event sent when the stream is done.
     */

    public static final AssistantStreamEvent DONE = fromString("done");

}
