// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.assistants.models;


import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonSerializable;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A set of resources that are used by the `file_search` tool.
 */

public final class FileSearchToolResource implements JsonSerializable<FileSearchToolResource> {

    /*
     * The ID of the vector store attached to this assistant. There can be a maximum of 1 vector
     * store attached to the assistant.
     */
    
    private List<String> vectorStoreIds;

    /**
     * Creates an instance of FileSearchToolResource class.
     */
    
    private FileSearchToolResource() {
    }

    /**
     * Get the vectorStoreIds property: The ID of the vector store attached to this assistant. There can be a maximum of
     * 1 vector
     * store attached to the assistant.
     *
     * @return the vectorStoreIds value.
     */
    
    public List<String> getVectorStoreIds() {
        return this.vectorStoreIds;
    }

    /**
     * {@inheritDoc}
     */
    
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("vector_store_ids", this.vectorStoreIds,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FileSearchToolResource from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of FileSearchToolResource if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FileSearchToolResource.
     */
    
    public static FileSearchToolResource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FileSearchToolResource deserializedFileSearchToolResource = new FileSearchToolResource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("vector_store_ids".equals(fieldName)) {
                    List<String> vectorStoreIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedFileSearchToolResource.vectorStoreIds = vectorStoreIds;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedFileSearchToolResource;
        });
    }
}
