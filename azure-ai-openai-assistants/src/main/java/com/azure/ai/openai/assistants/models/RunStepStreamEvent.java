// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.assistants.models;


import io.clientcore.core.util.ExpandableEnum;

import java.util.Collection;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;

/**
 * Run step operation related streaming events.
 */
public final class RunStepStreamEvent implements ExpandableEnum<RunStepStreamEvent> {
    private static final Map<String, RunStepStreamEvent> VALUES = new ConcurrentHashMap<>();

    private final String caseSensitive;
    private final String caseInsensitive;

    private RunStepStreamEvent(String name) {
        this.caseSensitive = name;
        this.caseInsensitive = name.toLowerCase();
    }

    @Override
    public RunStepStreamEvent getValue() {
        return RunStepStreamEvent.fromString(caseSensitive);
    }

    /**
     * Gets all known {@link RunStepStreamEvent} values.
     *
     * @return The known {@link RunStepStreamEvent} values.
     */
    public static Collection<RunStepStreamEvent> values() {
        return VALUES.values();
    }

    /**
     * Creates or finds a {@link RunStepStreamEvent} for the passed {@code name}.
     *
     * <p>{@code null} will be returned if {@code name} is {@code null}.</p>
     *
     * @param name A name to look for.
     *
     * @return The corresponding {@link RunStepStreamEvent} of the provided name, or {@code null} if {@code name} was
     * {@code null}.
     */
    public static RunStepStreamEvent fromString(String name) {
        if (name == null) {
            return null;
        }

        RunStepStreamEvent exceptionType = VALUES.get(name);

        if (exceptionType != null) {
            return exceptionType;
        }

        return VALUES.computeIfAbsent(name, RunStepStreamEvent::new);
    }

    @Override
    public String toString() {
        return caseSensitive;
    }

    @Override
    public int hashCode() {
        return caseInsensitive.hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof RunStepStreamEvent)) {
            return false;
        }

        RunStepStreamEvent other = (RunStepStreamEvent) obj;

        return Objects.equals(caseInsensitive, other.caseInsensitive);
    }

    /**
     * Event sent when a new thread run step is created. The data of this event is of type RunStep.
     */
    
    public static final RunStepStreamEvent THREAD_RUN_STEP_CREATED = fromString("thread.run.step.created");

    /**
     * Event sent when a run step moves to `in_progress` status. The data of this event is of type RunStep.
     */
    
    public static final RunStepStreamEvent THREAD_RUN_STEP_IN_PROGRESS = fromString("thread.run.step.in_progress");

    /**
     * Event sent when a run stepis being streamed. The data of this event is of type RunStepDeltaChunk.
     */
    
    public static final RunStepStreamEvent THREAD_RUN_STEP_DELTA = fromString("thread.run.step.delta");

    /**
     * Event sent when a run step is completed. The data of this event is of type RunStep.
     */
    
    public static final RunStepStreamEvent THREAD_RUN_STEP_COMPLETED = fromString("thread.run.step.completed");

    /**
     * Event sent when a run step fails. The data of this event is of type RunStep.
     */
    
    public static final RunStepStreamEvent THREAD_RUN_STEP_FAILED = fromString("thread.run.step.failed");

    /**
     * Event sent when a run step is cancelled. The data of this event is of type RunStep.
     */
    
    public static final RunStepStreamEvent THREAD_RUN_STEP_CANCELLED = fromString("thread.run.step.cancelled");

    /**
     * Event sent when a run step is expired. The data of this event is of type RunStep.
     */
    
    public static final RunStepStreamEvent THREAD_RUN_STEP_EXPIRED = fromString("thread.run.step.expired");


}
