// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.assistants.models;

import io.clientcore.core.util.ExpandableEnum;

import java.util.Collection;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;
/**
 * The state of the file.
 */
public final class FileState implements ExpandableEnum<FileState> {
    private static final Map<String, FileState> VALUES = new ConcurrentHashMap<>();

    private final String caseSensitive;
    private final String caseInsensitive;

    private FileState(String name) {
        this.caseSensitive = name;
        this.caseInsensitive = name.toLowerCase();
    }

    @Override
    public FileState getValue() {
        return FileState.fromString(caseSensitive);
    }

    /**
     * Gets all known {@link FileState} values.
     *
     * @return The known {@link FileState} values.
     */
    public static Collection<FileState> values() {
        return VALUES.values();
    }

    /**
     * Creates or finds a {@link FileState} for the passed {@code name}.
     *
     * <p>{@code null} will be returned if {@code name} is {@code null}.</p>
     *
     * @param name A name to look for.
     *
     * @return The corresponding {@link FileState} of the provided name, or {@code null} if {@code name} was
     * {@code null}.
     */
    public static FileState fromString(String name) {
        if (name == null) {
            return null;
        }

        FileState exceptionType = VALUES.get(name);

        if (exceptionType != null) {
            return exceptionType;
        }

        return VALUES.computeIfAbsent(name, FileState::new);
    }

    @Override
    public String toString() {
        return caseSensitive;
    }

    @Override
    public int hashCode() {
        return caseInsensitive.hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof FileState)) {
            return false;
        }

        FileState other = (FileState) obj;

        return Objects.equals(caseInsensitive, other.caseInsensitive);
    }
    /**
     * The file has been uploaded but it's not yet processed. This state is not returned by Azure OpenAI and exposed
     * only for
     * compatibility. It can be categorized as an inactive state.
     */
    
    public static final FileState UPLOADED = fromString("uploaded");

    /**
     * The operation was created and is not queued to be processed in the future. It can be categorized as an inactive
     * state.
     */
    
    public static final FileState PENDING = fromString("pending");

    /**
     * The operation has started to be processed. It can be categorized as an active state.
     */
    
    public static final FileState RUNNING = fromString("running");

    /**
     * The operation has successfully processed and is ready for consumption. It can be categorized as a terminal state.
     */
    
    public static final FileState PROCESSED = fromString("processed");

    /**
     * The operation has completed processing with a failure and cannot be further consumed. It can be categorized as a
     * terminal state.
     */
    
    public static final FileState ERROR = fromString("error");

    /**
     * The entity is in the process to be deleted. This state is not returned by Azure OpenAI and exposed only for
     * compatibility.
     * It can be categorized as an active state.
     */
    
    public static final FileState DELETING = fromString("deleting");

    /**
     * The entity has been deleted but may still be referenced by other entities predating the deletion. It can be
     * categorized as a
     * terminal state.
     */
    
    public static final FileState DELETED = fromString("deleted");

 
}
