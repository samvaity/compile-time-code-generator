// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.assistants.models;
import io.clientcore.core.util.ExpandableEnum;

import java.util.Collection;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;
/**
 * Specifies how the tool choice will be used.
 */
public final class AssistantsApiToolChoiceOptionMode implements ExpandableEnum<AssistantsApiToolChoiceOptionMode> {
    private static final Map<String, AssistantsApiToolChoiceOptionMode> VALUES = new ConcurrentHashMap<>();

    private final String caseSensitive;
    private final String caseInsensitive;

    private AssistantsApiToolChoiceOptionMode(String name) {
        this.caseSensitive = name;
        this.caseInsensitive = name.toLowerCase();
    }

    @Override
    public AssistantsApiToolChoiceOptionMode getValue() {
        return AssistantsApiToolChoiceOptionMode.fromString(caseSensitive);
    }

    /**
     * Gets all known {@link AssistantsApiToolChoiceOptionMode} values.
     *
     * @return The known {@link AssistantsApiToolChoiceOptionMode} values.
     */
    public static Collection<AssistantsApiToolChoiceOptionMode> values() {
        return VALUES.values();
    }

    /**
     * Creates or finds a {@link AssistantsApiToolChoiceOptionMode} for the passed {@code name}.
     *
     * <p>{@code null} will be returned if {@code name} is {@code null}.</p>
     *
     * @param name A name to look for.
     *
     * @return The corresponding {@link AssistantsApiToolChoiceOptionMode} of the provided name, or {@code null} if {@code name} was
     * {@code null}.
     */
    public static AssistantsApiToolChoiceOptionMode fromString(String name) {
        if (name == null) {
            return null;
        }

        AssistantsApiToolChoiceOptionMode exceptionType = VALUES.get(name);

        if (exceptionType != null) {
            return exceptionType;
        }

        return VALUES.computeIfAbsent(name, AssistantsApiToolChoiceOptionMode::new);
    }

    @Override
    public String toString() {
        return caseSensitive;
    }

    @Override
    public int hashCode() {
        return caseInsensitive.hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof AssistantsApiToolChoiceOptionMode)) {
            return false;
        }

        AssistantsApiToolChoiceOptionMode other = (AssistantsApiToolChoiceOptionMode) obj;

        return Objects.equals(caseInsensitive, other.caseInsensitive);
    }
    /**
     * The model will not call a function and instead generates a message.
     */
    
    public static final AssistantsApiToolChoiceOptionMode NONE = fromString("none");

    /**
     * The model can pick between generating a message or calling a function.
     */
    
    public static final AssistantsApiToolChoiceOptionMode AUTO = fromString("auto");
}
