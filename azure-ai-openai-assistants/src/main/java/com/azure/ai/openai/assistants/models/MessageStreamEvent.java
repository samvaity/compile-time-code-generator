// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.openai.assistants.models;


import io.clientcore.core.util.ExpandableEnum;

import java.util.Collection;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;

/**
 * Message operation related streaming events.
 */
public final class MessageStreamEvent implements ExpandableEnum<MessageStreamEvent> {
    private static final Map<String, MessageStreamEvent> VALUES = new ConcurrentHashMap<>();

    private final String caseSensitive;
    private final String caseInsensitive;

    private MessageStreamEvent(String name) {
        this.caseSensitive = name;
        this.caseInsensitive = name.toLowerCase();
    }

    @Override
    public MessageStreamEvent getValue() {
        return MessageStreamEvent.fromString(caseSensitive);
    }

    /**
     * Gets all known {@link MessageStreamEvent} values.
     *
     * @return The known {@link MessageStreamEvent} values.
     */
    public static Collection<MessageStreamEvent> values() {
        return VALUES.values();
    }

    /**
     * Creates or finds a {@link MessageStreamEvent} for the passed {@code name}.
     *
     * <p>{@code null} will be returned if {@code name} is {@code null}.</p>
     *
     * @param name A name to look for.
     *
     * @return The corresponding {@link MessageStreamEvent} of the provided name, or {@code null} if {@code name} was
     * {@code null}.
     */
    public static MessageStreamEvent fromString(String name) {
        if (name == null) {
            return null;
        }

        MessageStreamEvent exceptionType = VALUES.get(name);

        if (exceptionType != null) {
            return exceptionType;
        }

        return VALUES.computeIfAbsent(name, MessageStreamEvent::new);
    }

    @Override
    public String toString() {
        return caseSensitive;
    }

    @Override
    public int hashCode() {
        return caseInsensitive.hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof MessageStreamEvent)) {
            return false;
        }

        MessageStreamEvent other = (MessageStreamEvent) obj;

        return Objects.equals(caseInsensitive, other.caseInsensitive);
    }

    /**
     * Event sent when a new message is created. The data of this event is of type ThreadMessage.
     */
    
    public static final MessageStreamEvent THREAD_MESSAGE_CREATED = fromString("thread.message.created");

    /**
     * Event sent when a message moves to `in_progress` status. The data of this event is of type ThreadMessage.
     */
    
    public static final MessageStreamEvent THREAD_MESSAGE_IN_PROGRESS = fromString("thread.message.in_progress");

    /**
     * Event sent when a message is being streamed. The data of this event is of type MessageDeltaChunk.
     */
    
    public static final MessageStreamEvent THREAD_MESSAGE_DELTA = fromString("thread.message.delta");

    /**
     * Event sent when a message is completed. The data of this event is of type ThreadMessage.
     */
    
    public static final MessageStreamEvent THREAD_MESSAGE_COMPLETED = fromString("thread.message.completed");

    /**
     * Event sent before a message is completed. The data of this event is of type ThreadMessage.
     */
    
    public static final MessageStreamEvent THREAD_MESSAGE_INCOMPLETE = fromString("thread.message.incomplete");
}
