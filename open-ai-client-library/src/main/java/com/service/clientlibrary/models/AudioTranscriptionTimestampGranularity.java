// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.service.clientlibrary.models;



import io.clientcore.core.util.ExpandableEnum;

import java.util.Collection;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;

/**
 * Defines the timestamp granularities that can be requested on a verbose transcription response.
 */
public final class AudioTranscriptionTimestampGranularity
        implements ExpandableEnum<AudioTranscriptionTimestampGranularity> {
    private static final Map<String, AudioTranscriptionTimestampGranularity> VALUES = new ConcurrentHashMap<>();

    private final String caseSensitive;
    private final String caseInsensitive;

    private AudioTranscriptionTimestampGranularity(String name) {
        this.caseSensitive = name;
        this.caseInsensitive = name.toLowerCase();
    }

    @Override
    public AudioTranscriptionTimestampGranularity getValue() {
        return AudioTranscriptionTimestampGranularity.fromString(caseSensitive);
    }

    /**
     * Gets all known {@link AudioTranscriptionTimestampGranularity} values.
     *
     * @return The known {@link AudioTranscriptionTimestampGranularity} values.
     */
    public static Collection<AudioTranscriptionTimestampGranularity> values() {
        return VALUES.values();
    }

    /**
     * Creates or finds a {@link AudioTranscriptionTimestampGranularity} for the passed {@code name}.
     *
     * <p>{@code null} will be returned if {@code name} is {@code null}.</p>
     *
     * @param name A name to look for.
     *
     * @return The corresponding {@link AudioTranscriptionTimestampGranularity} of the provided name, or {@code null} if {@code name} was
     * {@code null}.
     */
    public static AudioTranscriptionTimestampGranularity fromString(String name) {
        if (name == null) {
            return null;
        }

        AudioTranscriptionTimestampGranularity exceptionType = VALUES.get(name);

        if (exceptionType != null) {
            return exceptionType;
        }

        return VALUES.computeIfAbsent(name, AudioTranscriptionTimestampGranularity::new);
    }

    @Override
    public String toString() {
        return caseSensitive;
    }

    @Override
    public int hashCode() {
        return caseInsensitive.hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof AudioTranscriptionTimestampGranularity)) {
            return false;
        }

        AudioTranscriptionTimestampGranularity other = (AudioTranscriptionTimestampGranularity) obj;

        return Objects.equals(caseInsensitive, other.caseInsensitive);
    }

    /**
     * Indicates that responses should include timing information about each transcribed word. Note that generating word
     * timestamp information will incur additional response latency.
     */
    
    public static final AudioTranscriptionTimestampGranularity WORD = fromString("word");

    /**
     * Indicates that responses should include timing and other information about each transcribed audio segment. Audio
     * segment timestamp information does not incur any additional latency.
     */
    
    public static final AudioTranscriptionTimestampGranularity SEGMENT = fromString("segment");

}
