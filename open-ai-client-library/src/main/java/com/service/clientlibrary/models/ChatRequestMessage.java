// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.service.clientlibrary.models;


import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonSerializable;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;

import java.io.IOException;

import java.io.IOException;
/**
 * An abstract representation of a chat message as provided in a request.
 */
public class ChatRequestMessage implements JsonSerializable<ChatRequestMessage> {

    /**
     * Creates an instance of ChatRequestMessage class.
     */
    
    public ChatRequestMessage() {
    }

    /*
     * The chat role associated with this message.
     */
    
    private ChatRole role = ChatRole.fromString("ChatRequestMessage");

    /**
     * Get the role property: The chat role associated with this message.
     *
     * @return the role value.
     */
    
    public ChatRole getRole() {
        return this.role;
    }

    /**
     * {@inheritDoc}
     */
    
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("role", this.role == null ? null : this.role.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChatRequestMessage from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChatRequestMessage if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ChatRequestMessage.
     */
    
    public static ChatRequestMessage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                // Prepare for reading
                readerToUse.nextToken();
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("role".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("system".equals(discriminatorValue)) {
                    return ChatRequestSystemMessage.fromJson(readerToUse.reset());
                } else if ("user".equals(discriminatorValue)) {
                    return ChatRequestUserMessage.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    
    static ChatRequestMessage fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ChatRequestMessage deserializedChatRequestMessage = new ChatRequestMessage();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("role".equals(fieldName)) {
                    deserializedChatRequestMessage.role = ChatRole.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedChatRequestMessage;
        });
    }
}
