// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.service.clientlibrary.models;



import io.clientcore.core.util.ExpandableEnum;

import java.util.Collection;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;

/**
 * Defines available options for the underlying response format of output translation information.
 */
public final class AudioTranslationFormat implements ExpandableEnum<AudioTranslationFormat> {

    private static final Map<String, AudioTranslationFormat> VALUES = new ConcurrentHashMap<>();

    private final String caseSensitive;
    private final String caseInsensitive;

    private AudioTranslationFormat(String name) {
        this.caseSensitive = name;
        this.caseInsensitive = name.toLowerCase();
    }

    @Override
    public AudioTranslationFormat getValue() {
        return AudioTranslationFormat.fromString(caseSensitive);
    }

    /**
     * Gets all known {@link AudioTranslationFormat} values.
     *
     * @return The known {@link AudioTranslationFormat} values.
     */
    public static Collection<AudioTranslationFormat> values() {
        return VALUES.values();
    }

    /**
     * Creates or finds a {@link AudioTranslationFormat} for the passed {@code name}.
     *
     * <p>{@code null} will be returned if {@code name} is {@code null}.</p>
     *
     * @param name A name to look for.
     *
     * @return The corresponding {@link AudioTranslationFormat} of the provided name, or {@code null} if {@code name} was
     * {@code null}.
     */
    public static AudioTranslationFormat fromString(String name) {
        if (name == null) {
            return null;
        }

        AudioTranslationFormat exceptionType = VALUES.get(name);

        if (exceptionType != null) {
            return exceptionType;
        }

        return VALUES.computeIfAbsent(name, AudioTranslationFormat::new);
    }

    @Override
    public String toString() {
        return caseSensitive;
    }

    @Override
    public int hashCode() {
        return caseInsensitive.hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof AudioTranslationFormat)) {
            return false;
        }

        AudioTranslationFormat other = (AudioTranslationFormat) obj;

        return Objects.equals(caseInsensitive, other.caseInsensitive);
    }
    
    
    /**
     * Use a response body that is a JSON object containing a single 'text' field for the translation.
     */
    
    public static final AudioTranslationFormat JSON = fromString("json");

    /**
     * Use a response body that is a JSON object containing translation text along with timing, segments, and other
     * metadata.
     */
    
    public static final AudioTranslationFormat VERBOSE_JSON = fromString("verbose_json");

    /**
     * Use a response body that is plain text containing the raw, unannotated translation.
     */
    
    public static final AudioTranslationFormat TEXT = fromString("text");

    /**
     * Use a response body that is plain text in SubRip (SRT) format that also includes timing information.
     */
    
    public static final AudioTranslationFormat SRT = fromString("srt");

    /**
     * Use a response body that is plain text in Web Video Text Tracks (VTT) format that also includes timing
     * information.
     */
    
    public static final AudioTranslationFormat VTT = fromString("vtt");
}
