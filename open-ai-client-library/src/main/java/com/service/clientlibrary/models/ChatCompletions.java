// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.service.clientlibrary.models;


import io.clientcore.core.json.JsonReader;
import io.clientcore.core.json.JsonSerializable;
import io.clientcore.core.json.JsonToken;
import io.clientcore.core.json.JsonWriter;

import java.io.IOException;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;

/**
 * Representation of the response data from a chat completions request.
 * Completions support a wide variety of tasks and generate text that continues from or "completes"
 * provided prompt data.
 */

public final class ChatCompletions implements JsonSerializable<ChatCompletions> {

    /*
     * A unique identifier associated with this chat completions response.
     */
    private final String id;


    /**
     * Get the id property: A unique identifier associated with this chat completions response.
     *
     * @return the id value.
     */
    public String getId() {
        return this.id;
    }

    /*
     * The first timestamp associated with generation activity for this completions response,
     * represented as seconds since the beginning of the Unix epoch of 00:00 on 1 Jan 1970.
     */
    private final long createdAt;

    /**
     * Get the createdAt property: The first timestamp associated with generation activity for this completions
     * response,
     * represented as seconds since the beginning of the Unix epoch of 00:00 on 1 Jan 1970.
     *
     * @return the createdAt value.
     */
    public OffsetDateTime getCreatedAt() {
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.createdAt), ZoneOffset.UTC);
    }

    /*
     * Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made
     * that
     * might impact determinism.
     */
    private String systemFingerprint;

    /**
     * Get the systemFingerprint property: Can be used in conjunction with the `seed` request parameter to understand
     * when backend changes have been made that
     * might impact determinism.
     *
     * @return the systemFingerprint value.
     */
    public String getSystemFingerprint() {
        return this.systemFingerprint;
    }

    /**
     * Creates an instance of ChatCompletions class.
     *
     * @param id the id value to set.
     * @param createdAt the createdAt value to set.
     */
    private ChatCompletions(String id, OffsetDateTime createdAt) {
        this.id = id;
        if (createdAt == null) {
            this.createdAt = 0L;
        } else {
            this.createdAt = createdAt.toEpochSecond();
        }
    }

    /*
     * The model name used for this completions request.
     */
    private String model;

    /**
     * Get the model property: The model name used for this completions request.
     *
     * @return the model value.
     */
    public String getModel() {
        return this.model;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeLongField("created", this.createdAt);
        jsonWriter.writeStringField("model", this.model);
        jsonWriter.writeStringField("system_fingerprint", this.systemFingerprint);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChatCompletions from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChatCompletions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ChatCompletions.
     */
    public static ChatCompletions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            OffsetDateTime createdAt = null;
            String model = null;
            String systemFingerprint = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("created".equals(fieldName)) {
                    createdAt = OffsetDateTime.ofInstant(Instant.ofEpochSecond(reader.getLong()), ZoneOffset.UTC);
                } else if ("model".equals(fieldName)) {
                    model = reader.getString();
                } else if ("system_fingerprint".equals(fieldName)) {
                    systemFingerprint = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            ChatCompletions deserializedChatCompletions = new ChatCompletions(id, createdAt);
            deserializedChatCompletions.model = model;
            deserializedChatCompletions.systemFingerprint = systemFingerprint;
            return deserializedChatCompletions;
        });
    }
}
