// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.service.clientlibrary;

import com.service.clientlibrary.implementation.OpenAIClientServiceImpl;
import com.service.clientlibrary.models.OpenAIServiceVersion;
import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.ServiceClientBuilder;
import io.clientcore.core.credential.KeyCredential;
import io.clientcore.core.http.client.HttpClient;
import io.clientcore.core.http.models.HttpLogOptions;
import io.clientcore.core.http.models.HttpRedirectOptions;
import io.clientcore.core.http.models.HttpRetryOptions;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
import io.clientcore.core.http.pipeline.HttpRetryPolicy;
import io.clientcore.core.http.pipeline.KeyCredentialPolicy;
import io.clientcore.core.implementation.http.serializer.DefaultJsonSerializer;
import io.clientcore.core.models.traits.ConfigurationTrait;
import io.clientcore.core.models.traits.EndpointTrait;
import io.clientcore.core.models.traits.HttpTrait;
import io.clientcore.core.models.traits.KeyCredentialTrait;
import io.clientcore.core.util.ClientLogger;
import io.clientcore.core.util.configuration.Configuration;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * A builder for creating a new instance of the OpenAIClient type.
 */
@ServiceClientBuilder(serviceClients = { OpenAIClient.class})
public final class OpenAIClientBuilder implements HttpTrait<OpenAIClientBuilder>,
    ConfigurationTrait<OpenAIClientBuilder>,
    KeyCredentialTrait<OpenAIClientBuilder>, EndpointTrait<OpenAIClientBuilder> {

    private static final String SDK_NAME = "name";

    private static final String SDK_VERSION = "version";

    private final List<HttpPipelinePolicy> pipelinePolicies;

    /**
     * Create an instance of the OpenAIClientBuilder.
     */
    public OpenAIClientBuilder() {
        this.pipelinePolicies = new ArrayList<>();
    }

    /*
     * The HTTP httpPipeline to send requests through.
     */
    private HttpPipeline pipeline;

    /**
     * {@inheritDoc}.
     */
    public OpenAIClientBuilder httpPipeline(HttpPipeline pipeline) {
        if (this.pipeline != null && pipeline == null) {
            LOGGER.atInfo().log("HttpPipeline is being set to 'null' when it was previously configured.");
        }
        this.pipeline = pipeline;
        return this;
    }

    /*
     * The HTTP client used to send the request.
     */
    private HttpClient httpClient;

    /**
     * {@inheritDoc}.
     */
    @Override
    public OpenAIClientBuilder httpClient(HttpClient httpClient) {
        this.httpClient = httpClient;
        return this;
    }

    /*
     * The logging configuration for HTTP requests and responses.
     */
    private HttpLogOptions httpLogOptions;

    /**
     * {@inheritDoc}.
     */
    @Override
    public OpenAIClientBuilder httpLogOptions(HttpLogOptions httpLogOptions) {
        this.httpLogOptions = httpLogOptions;
        return this;
    }

    /*
     * The retry options to configure retry policy for failed requests.
     */
    private HttpRetryOptions retryOptions;

    /**
     * {@inheritDoc}.
     */
    @Override
    public OpenAIClientBuilder httpRetryOptions(HttpRetryOptions retryOptions) {
        this.retryOptions = retryOptions;
        return this;
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public OpenAIClientBuilder addHttpPipelinePolicy(HttpPipelinePolicy customPolicy) {
        Objects.requireNonNull(customPolicy, "'customPolicy' cannot be null.");
        pipelinePolicies.add(customPolicy);
        return this;
    }

    /*
     * The redirect options to configure redirect policy
     */
    @Metadata(generated = true)
    private HttpRedirectOptions redirectOptions;

    /**
     * {@inheritDoc}.
     */
    @Metadata(generated = true)
    public OpenAIClientBuilder httpRedirectOptions(HttpRedirectOptions redirectOptions) {
        this.redirectOptions = redirectOptions;
        return this;
    }

    /*
     * The configuration store that is used during construction of the service client.
     */
    @Metadata(generated = true)
    private Configuration configuration;

    /**
     * {@inheritDoc}.
     */
    @Metadata(generated = true)
    public OpenAIClientBuilder configuration(Configuration configuration) {
        this.configuration = configuration;
        return this;
    }

    /**
     * The KeyCredential used for OpenAi authentication. It could be either of Azure or Non-Azure OpenAI API key.
     */
    private KeyCredential keyCredential;

    /**
     * {@inheritDoc}.
     */
    @Override
    public OpenAIClientBuilder credential(KeyCredential keyCredential) {
        this.keyCredential = keyCredential;
        return this;
    }

    /*
     * The service endpoint
     */
    private String endpoint;

    /**
     * {@inheritDoc}.
     */
    @Override
    public OpenAIClientBuilder endpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /*
     * Service version
     */
    private OpenAIServiceVersion serviceVersion;

    /**
     * Sets Service version.
     *
     * @param serviceVersion the serviceVersion value.
     * @return the OpenAIClientBuilder.
     */
    public OpenAIClientBuilder serviceVersion(OpenAIServiceVersion serviceVersion) {
        this.serviceVersion = serviceVersion;
        return this;
    }

    /**
     * Builds an instance of OpenAIClientImpl with the provided parameters.
     *
     * @return an instance of OpenAIClientImpl.
     */
    private OpenAIClientServiceImpl buildInnerClient() {
        HttpPipeline localPipeline = (pipeline != null) ? pipeline : createHttpPipeline();
        OpenAIServiceVersion localServiceVersion
            = (serviceVersion != null) ? serviceVersion : OpenAIServiceVersion.getLatest();
        OpenAIClientServiceImpl client = new OpenAIClientServiceImpl(localPipeline, new DefaultJsonSerializer(),
            this.endpoint, localServiceVersion);
        return client;
    }

    private HttpPipeline createHttpPipeline() {
        Configuration buildConfiguration
            = (configuration == null) ? Configuration.getGlobalConfiguration() : configuration;
        HttpLogOptions localHttpLogOptions = this.httpLogOptions == null ? new HttpLogOptions() : this.httpLogOptions;
        HttpPipelineBuilder httpPipelineBuilder = new HttpPipelineBuilder();
        List<HttpPipelinePolicy> policies = new ArrayList<>();
        policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
        policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
        this.pipelinePolicies.stream().forEach(p -> policies.add(p));
        if (keyCredential != null) {
            policies.add(new KeyCredentialPolicy("api-key", keyCredential, null));
        }
        httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
        return httpPipelineBuilder.build();
    }

    /**
     * Builds an instance of OpenAIClient class.
     *
     * @return an instance of OpenAIClient.
     */
    public OpenAIClient buildClient() {
        return new OpenAIClient(buildInnerClient());
    }

    private static final ClientLogger LOGGER = new ClientLogger(OpenAIClientBuilder.class);
}
