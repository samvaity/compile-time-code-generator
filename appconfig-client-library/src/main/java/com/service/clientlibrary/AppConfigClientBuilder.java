// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.service.clientlibrary;

import com.service.clientlibrary.implementation.AppConfigServiceImpl;
import com.service.clientlibrary.implementation.models.ConfigurationClientCredentials;
import com.service.clientlibrary.implementation.models.ConfigurationCredentialsPolicy;
import com.service.clientlibrary.models.AppConfigServiceVersion;
import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.ServiceClientBuilder;
import io.clientcore.core.http.client.HttpClient;
import io.clientcore.core.http.models.HttpLogOptions;
import io.clientcore.core.http.models.HttpRedirectOptions;
import io.clientcore.core.http.models.HttpRetryOptions;
import io.clientcore.core.http.pipeline.HttpPipeline;
import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
import io.clientcore.core.http.pipeline.HttpRetryPolicy;
import io.clientcore.core.implementation.http.serializer.DefaultJsonSerializer;
import io.clientcore.core.models.traits.ConfigurationTrait;
import io.clientcore.core.models.traits.EndpointTrait;
import io.clientcore.core.models.traits.HttpTrait;
import io.clientcore.core.util.ClientLogger;
import io.clientcore.core.util.configuration.Configuration;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * A builder for creating a new instance of the AppConfigClient type.
 */
@ServiceClientBuilder(serviceClients = { AppConfigClient.class})
public final class AppConfigClientBuilder implements HttpTrait<AppConfigClientBuilder>,
    ConfigurationTrait<AppConfigClientBuilder>, EndpointTrait<AppConfigClientBuilder> {

    private static final String SDK_NAME = "name";

    private static final String SDK_VERSION = "version";

    private final List<HttpPipelinePolicy> pipelinePolicies;
    private String connectionString;

    /**
     * Create an instance of the AppConfigClientBuilder.
     */
    public AppConfigClientBuilder() {
        this.pipelinePolicies = new ArrayList<>();
    }

    /*
     * The HTTP httpPipeline to send requests through.
     */
    private HttpPipeline pipeline;

    /**
     * {@inheritDoc}.
     */
    public AppConfigClientBuilder httpPipeline(HttpPipeline pipeline) {
        if (this.pipeline != null && pipeline == null) {
            LOGGER.atInfo().log("HttpPipeline is being set to 'null' when it was previously configured.");
        }
        this.pipeline = pipeline;
        return this;
    }

    /*
     * The HTTP client used to send the request.
     */
    private HttpClient httpClient;

    /**
     * {@inheritDoc}.
     */
    @Override
    public AppConfigClientBuilder httpClient(HttpClient httpClient) {
        this.httpClient = httpClient;
        return this;
    }

    /*
     * The logging configuration for HTTP requests and responses.
     */
    private HttpLogOptions httpLogOptions;

    /**
     * {@inheritDoc}.
     */
    @Override
    public AppConfigClientBuilder httpLogOptions(HttpLogOptions httpLogOptions) {
        this.httpLogOptions = httpLogOptions;
        return this;
    }

    /*
     * The retry options to configure retry policy for failed requests.
     */
    private HttpRetryOptions retryOptions;

    /**
     * {@inheritDoc}.
     */
    @Override
    public AppConfigClientBuilder httpRetryOptions(HttpRetryOptions retryOptions) {
        this.retryOptions = retryOptions;
        return this;
    }

    /**
     * {@inheritDoc}.
     */
    @Override
    public AppConfigClientBuilder addHttpPipelinePolicy(HttpPipelinePolicy customPolicy) {
        Objects.requireNonNull(customPolicy, "'customPolicy' cannot be null.");
        pipelinePolicies.add(customPolicy);
        return this;
    }

    /*
     * The redirect options to configure redirect policy
     */
    @Metadata(generated = true)
    private HttpRedirectOptions redirectOptions;

    /**
     * {@inheritDoc}.
     */
    @Metadata(generated = true)
    public AppConfigClientBuilder httpRedirectOptions(HttpRedirectOptions redirectOptions) {
        this.redirectOptions = redirectOptions;
        return this;
    }

    /*
     * The configuration store that is used during construction of the service client.
     */
    @Metadata(generated = true)
    private Configuration configuration;

    /**
     * {@inheritDoc}.
     */
    @Metadata(generated = true)
    public AppConfigClientBuilder configuration(Configuration configuration) {
        this.configuration = configuration;
        return this;
    }

    /*
     * The service endpoint
     */
    private String endpoint;

    /**
     * {@inheritDoc}.
     */
    @Override
    public AppConfigClientBuilder endpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /*
     * Service version
     */
    private AppConfigServiceVersion serviceVersion;

    /**
     * Sets Service version.
     *
     * @param serviceVersion the serviceVersion value.
     * @return the AppConfigClientBuilder.
     */
    public AppConfigClientBuilder serviceVersion(AppConfigServiceVersion serviceVersion) {
        this.serviceVersion = serviceVersion;
        return this;
    }

    public AppConfigClientBuilder connectionString(String connectionString) {
        this.connectionString = connectionString;
        return this;
    }

    /**
     * Builds an instance of AppConfigClientImpl with the provided parameters.
     *
     * @return an instance of AppConfigClientImpl.
     */
    private AppConfigServiceImpl buildInnerClient() {
        HttpPipeline localPipeline = (pipeline != null) ? pipeline : createHttpPipeline();
        AppConfigServiceVersion localServiceVersion
            = (serviceVersion != null) ? serviceVersion : AppConfigServiceVersion.getLatest();
        return new AppConfigServiceImpl(localPipeline, new DefaultJsonSerializer(),
            this.endpoint, localServiceVersion);
    }

    private HttpPipeline createHttpPipeline() {
        Configuration buildConfiguration
            = (configuration == null) ? Configuration.getGlobalConfiguration() : configuration;
        ConfigurationClientCredentials credentialsLocal = new ConfigurationClientCredentials(connectionString);
        HttpLogOptions localHttpLogOptions = this.httpLogOptions == null ? new HttpLogOptions() : this.httpLogOptions;
        HttpPipelineBuilder httpPipelineBuilder = new HttpPipelineBuilder();
        List<HttpPipelinePolicy> policies = new ArrayList<>();
        policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
        policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
        this.pipelinePolicies.stream().forEach(p -> policies.add(p));
        this.endpoint = credentialsLocal.getBaseUri();
        policies.add(new ConfigurationCredentialsPolicy(credentialsLocal));
        httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
        return httpPipelineBuilder.build();
    }

    /**
     * Builds an instance of AppConfigClient class.
     *
     * @return an instance of AppConfigClient.
     */
    public AppConfigClient buildClient() {
        return new AppConfigClient(buildInnerClient());
    }

    private static final ClientLogger LOGGER = new ClientLogger(AppConfigClientBuilder.class);
}
